function containsNearbyDuplicate(nums: number[], k: number): boolean {
    
 /*function quickSort(arr: number[]): number[] {
    if (arr.length <= 1){
         return arr
    }; 
    const pivot = arr[Math.floor(arr.length/2)];
    
    const left = [];
    const right = [];
    const mid = [];
    
    for (const num of arr) {
        if (num < pivot) {
            left.push(num);
        } else if (num > pivot) {
            right.push(num);
        } else {
            mid.push(num);
        }
    }
    
    return [...quickSort(left), ...mid, ...quickSort(right)];
}
    let sorted = quickSort(nums);

    for(let i=0;i<sorted.length-1;i++){
        if(sorted[i]===sorted[i+1] && (i - (i+1)) <= k){
                return true;
            }
    }
    return false;*/

    let res = new Map<number, number>(); 

    for (let i = 0; i < nums.length; i++) {
        const num = nums[i];
        if (res.has(num) && i - res.get(num) <= k) {
            return true;
        }
        res.set(num, i); 
    }

    return false;
};
